{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst axios = require(\"axios\");\n\nexport default function useFetch(url) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null); // run this every render of the component\n\n  useEffect(() => {\n    console.log(\"useFetch has been triggered\");\n    const abortController = new AbortController();\n    axios.get(url).then(res => {\n      if (!res.ok) {\n        throw new Error(\"Couldn't fetch the data for that resource.\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setIsPending(false);\n      setData(data);\n      setError(null);\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"Fetch Aborted\");\n      } else {\n        setError(err.message);\n        setIsPending(false);\n      }\n    }); // clean up effort, Abort Controller\n    // if in the middle of the async, user moved to other page\n    // abort started fetch via axios\n\n    return () => abortController.abort();\n  }, [url]); // dependency for the useEffect to triggers\n\n  return {\n    data,\n    isPending,\n    error\n  };\n}\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");","map":{"version":3,"sources":["/Users/MPB/repos/CS545/Assignments/react-front-end/src/customHooks/useFetch.js"],"names":["useState","useEffect","axios","require","useFetch","url","data","setData","isPending","setIsPending","error","setError","console","log","abortController","AbortController","get","then","res","ok","Error","json","catch","err","name","message","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC,CAHoC,CAKpC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,UAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAb,IAAAA,KAAK,CACFc,GADH,CACOX,GADP,EAEGY,IAFH,CAESC,GAAD,IAAS;AACb,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,cAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KAPH,EAQGJ,IARH,CAQSX,IAAD,IAAU;AACdG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAZH,EAaGW,KAbH,CAaUC,GAAD,IAAS;AACd,UAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BZ,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACY,GAAG,CAACE,OAAL,CAAR;AACAhB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KApBH,EAHc,CAyBd;AACA;AACA;;AACA,WAAO,MAAMK,eAAe,CAACY,KAAhB,EAAb;AACD,GA7BQ,EA6BN,CAACrB,GAAD,CA7BM,CAAT,CANoC,CAoCpC;;AAEA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA;AAAnB,GAAP;AACD;;GAvCuBN,Q","sourcesContent":["import { useState, useEffect } from \"react\";\nconst axios = require(\"axios\");\n\nexport default function useFetch(url) {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  // run this every render of the component\n  useEffect(() => {\n    console.log(\"useFetch has been triggered\");\n    const abortController = new AbortController();\n    axios\n      .get(url)\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Couldn't fetch the data for that resource.\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      })\n      .catch((err) => {\n        if (err.name === \"AbortError\") {\n          console.log(\"Fetch Aborted\");\n        } else {\n          setError(err.message);\n          setIsPending(false);\n        }\n      });\n\n    // clean up effort, Abort Controller\n    // if in the middle of the async, user moved to other page\n    // abort started fetch via axios\n    return () => abortController.abort();\n  }, [url]);\n  // dependency for the useEffect to triggers\n\n  return { data, isPending, error };\n}\n"]},"metadata":{},"sourceType":"module"}